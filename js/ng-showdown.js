(function (root, factory) {if (typeof define === 'function' && define.amd) {define(['angular', 'showdown'], factory);} else if (typeof module === 'object' && module.exports) {module.exports = factory(require('angular'), require('showdown'));} else {root.ngShowdown = factory(root.angular, root.showdown);}}(this, function (angular, showdown) {if (typeof angular === 'undefined' || typeof showdown === 'undefined') {throw new Error('ng-showdown was not loaded because one of its dependencies (AngularJS or Showdown) was not met');}angular.module('ng-showdown', ['ngSanitize']).provider('$showdown', ngShowdown).directive('sdModelToHtml', ['$showdown', '$sanitize', '$sce', sdModelToHtmlDirective]).directive('markdownToHtml', ['$showdown', '$sanitize', '$sce', markdownToHtmlDirective]).filter('sdStripHtml', ['$showdown', stripHtmlFilter]).filter('stripHtml', ['$showdown', stripHtmlFilter]);function ngShowdown() {var config = {extensions: [],sanitize: false,emoji:true,simpleLineBreaks:true,simplifiedAutoLink:true,smoothLivePreview:true};this.setOption = function (key, value) {config[key] = value;return this;};this.getOption = function (key) {if (config.hasOwnProperty(key)) {return config[key];} else {return undefined;}};this.loadExtension = function (extensionName) {config.extensions.push(extensionName);return this;};function SDObject() {var converter = new showdown.Converter(config);this.makeHtml = function (markdown) {return converter.makeHtml(markdown);};this.stripHtml = function (text) {return String(text).replace(/<[^>]+>/gm, '');};this.getOption = function (key) {return converter.getOption(key);};this.getOptions = function () {return converter.getOptions();};this.setOption = function (key, value) {converter.setOption(key, value);return this;};}this.$get = function () {return new SDObject();};}function sdModelToHtmlDirective($showdown, $sanitize, $sce) {return {restrict: 'A',link: getLinkFn($showdown, $sanitize, $sce),scope: {model: '=sdModelToHtml'},template: '<div ng-bind-html="trustedHtml"></div>'};}function markdownToHtmlDirective($showdown, $sanitize, $sce) {return {restrict: 'A',link: getLinkFn($showdown, $sanitize, $sce),scope: {model: '=markdownToHtml'},template: '<div ng-bind-html="trustedHtml"></div>'};}function getLinkFn($showdown, $sanitize, $sce) {return function (scope, element, attrs) {scope.$watch('model', function (newValue) {var showdownHTML;if (typeof newValue === 'string') {showdownHTML = $showdown.makeHtml(newValue);scope.trustedHtml = ($showdown.getOption('sanitize')) ? $sanitize(showdownHTML) : $sce.trustAsHtml(showdownHTML);} else {scope.trustedHtml = typeof newValue;}});};}function stripHtmlFilter($showdown) {return function (text) {return $showdown.stripHtml(text);};}return angular.module('ng-showdown');}));